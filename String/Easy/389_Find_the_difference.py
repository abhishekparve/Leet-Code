# You are given two strings s and t.
# String t is generated by random shuffling string s and then add one more letter at a random position.
# Return the letter that was added to t.

# Example 1:
# Input: s = "abcd", t = "abcde"
# Output: "e"
# Explanation: 'e' is the letter that was added.

# Example 2:
# Input: s = "", t = "y"
# Output: "y"

# Using Bitwise XOR

# The time complexity of this solution is O(n), where n is the length of the longer string between s and t.
# This is because we iterate through both strings once to calculate the XOR of their characters.

# The space complexity is O(1) because we only use a constant amount of extra space to store the result variable.

class Solution:
    def findDifference(self, s, t):
        result = 0
        for c in s:
            result ^= ord(c)
        for c in t:
            result ^= ord(c)
        return chr(result)

# Using sum
    
# The time complexity of this function is O(n), where n is the length of the longer string between s and t.
# This is because we iterate through each character in both strings once.

# The space complexity of this function is O(1) because we only use a constant amount of extra space 
# to store the sums of the ASCII values of the characters in s and t.

class Solution2:
    def findDifference(self, s, t):
        sum_s = 0
        sum_t = 0
        for c in s:
            sum_s += ord(c)
        for c in t:
            sum_t += ord(c)
        return chr(sum_t - sum_s)

# Using hash map

# TC = O(n) and SC = O(n)

from collections import Counter
class Solution3:
    def findDifference(self, s, t):
        s_count = Counter(s)
        t_count = Counter(t)
        for char in t:
            if char not in s_count:
                return char
            # if s = "a" and t = "aa"
            if s_count[char] < t_count[char]:
                return char

answer = Solution3()
answer.findDifference("a","aa")
            

